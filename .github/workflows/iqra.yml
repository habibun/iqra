name: Iqra
on: [ push ]
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        php-versions: [8.0]
        node-version: [16.16]
    steps:
      - name: Install Php and Composer
        uses: shivammathur/setup-php@2cb9b829437ee246e9b3cac53555a39208ca6d28
        with:
            php-version: ${{ matrix.php-versions }}
            extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring, mysqli, pdo_pgsql, pgsql

      - name: Install Node.js
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install Symfony CLI
        run: |
          wget https://get.symfony.com/cli/installer -O - | bash
          mv /home/runner/.symfony5/bin/symfony /usr/local/bin/symfony      

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Check PHP Version
        run: php -v

      - name: Check out repository
        uses: actions/checkout@v2

      - name: Copy .env.local
        run: php -r "file_exists('.env.local') || copy('.env', '.env.local');"

      - name: Install php dependencies
        run:  symfony composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Check Symfony Requirements
        run: symfony check:requirements

      - name: Install node dependencies
        run: yarn

      - name: Doctrine - Update Database Schema
        run: symfony console doctrine:schema:update --force

      - name: Clear Symfony Cache
        run:  symfony console cache:clear

      - name: Coding Standards & Doctrine Mapping Checks
        run: make lint-all
      ## Tests
      - name: Prepare db for test
        run: |
          symfony console d:d:d --force --if-exists --env=test
          symfony console d:d:c --if-not-exists --env=test
          symfony console d:s:c --dump-sql --env=test
          symfony console d:s:c --env=test
      - name: Doctrine migrations for test
        run: symfony console doctrine:migrations:migrate -n --env=test

      - name: Run Application Tests
        run: symfony php bin/phpunit --stop-on-failure
